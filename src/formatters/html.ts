import { SummaryData, PodRestart, PodHealthRecord, EventInfo, JobStatus } from '../types';

interface RecommendedMetric {
  category: string;
  description: string;
  metrics: string[];
}

export class HtmlFormatter {
  formatSummary(summary: SummaryData, insights: string[] = []): string {
    const sections = [
      this.renderHeader(summary),
      this.renderOverview(summary),
      this.renderPodSection(summary),
      this.renderJobSection(summary),
      this.renderEventSection(summary),
      this.renderInsightsSection(insights),
      this.renderRecommendedMetricsSection()
    ]
      .filter(Boolean)
      .join('\n');

    return `<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<title>K8S Daily Summary Report</title>
<style>
  * { box-sizing: border-box; }
  body { font-family: 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; margin: 0; background: #f4f6fb; color: #0f172a; }
  h1, h2, h3 { margin: 0; }
  a { color: #2563eb; }
  .header { background: linear-gradient(135deg, #0f172a, #1e3a8a); color: #f8fafc; padding: 40px 48px; }
  .header .meta { margin-top: 12px; font-size: 14px; opacity: 0.85; }
  .section { background: #ffffff; margin: 24px 48px; padding: 28px 32px; border-radius: 16px; box-shadow: 0 12px 24px -16px rgba(15, 23, 42, 0.35); }
  .section h2 { font-size: 22px; margin-bottom: 12px; color: #1e293b; }
  .muted { color: #64748b; }
  .stat-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px; margin-top: 20px; }
  .stat-card { background: #eef2ff; border-radius: 14px; padding: 18px 20px; border: 1px solid rgba(37, 99, 235, 0.15); box-shadow: inset 0 1px 0 rgba(255,255,255,0.6); }
  .stat-card .label { font-size: 13px; text-transform: uppercase; letter-spacing: 0.08em; color: #475569; }
  .stat-card .value { font-size: 28px; font-weight: 600; margin-top: 8px; color: #1e3a8a; }
  .stat-card.critical { background: #fee2e2; border-color: rgba(220, 38, 38, 0.25); }
  .stat-card.critical .value { color: #b91c1c; }
  .stat-card.warning { background: #fef3c7; border-color: rgba(217, 119, 6, 0.25); }
  .table-wrapper { overflow-x: auto; margin-top: 16px; border-radius: 12px; border: 1px solid #e2e8f0; }
  table { width: 100%; border-collapse: collapse; font-size: 14px; }
  thead { background: #0f172a; color: #f8fafc; }
  th, td { padding: 10px 12px; border-bottom: 1px solid #e2e8f0; text-align: left; }
  tbody tr:nth-child(even) { background: #f8fafc; }
  tbody tr.failed { background: #fee2e2; color: #991b1b; }
  tbody tr.highlight { background: #fffbeb; }
  .tag { display: inline-block; padding: 2px 10px; border-radius: 999px; font-size: 12px; font-weight: 500; background: #e2e8f0; color: #0f172a; }
  .tag.failed { background: #fee2e2; color: #b91c1c; }
  .tag.pending { background: #fef3c7; color: #b45309; }
  .tag.running { background: #dcfce7; color: #15803d; }
  .tag.warning { background: #fef08a; color: #b45309; }
  ul { margin: 8px 0 0 20px; }
  .insight-list { list-style: disc; margin-left: 24px; }
  .insight-list li { margin: 6px 0; }
  .metric-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 18px; margin-top: 16px; }
  .metric-card { background: #f8fafc; border: 1px solid #e2e8f0; padding: 18px; border-radius: 12px; box-shadow: inset 0 1px 0 rgba(255,255,255,0.7); }
  .metric-card h3 { font-size: 16px; margin-bottom: 8px; color: #1e40af; }
  .metric-card p { font-size: 13px; color: #475569; margin-bottom: 8px; }
  .empty-state { margin-top: 12px; font-size: 14px; color: #94a3b8; font-style: italic; }
  footer { text-align: center; padding: 24px; font-size: 12px; color: #94a3b8; }
</style>
</head>
<body>
${sections}
<footer>Generated by k8s-daily-summary</footer>
</body>
</html>`;
  }

  private renderHeader(summary: SummaryData): string {
    const namespaceLabel = summary.context.namespace || 'All namespaces';
    return `
<header class="header">
  <h1>K8S Daily Summary Report</h1>
  <div class="meta">Time Range: ${this.escapeHtml(summary.timeRange.start.toLocaleString())} â€“ ${this.escapeHtml(summary.timeRange.end.toLocaleString())}</div>
  <div class="meta">Namespace: ${this.escapeHtml(namespaceLabel)} &nbsp;â€¢&nbsp; Lookback: Last ${this.escapeHtml(summary.context.hours)} hours</div>
</header>`;
  }

  private renderOverview(summary: SummaryData): string {
    const cards = [
      { label: 'Total Pods', value: summary.pods.total },
      { label: 'Restarts', value: summary.pods.restarted.length, className: summary.pods.restarted.length > 0 ? 'warning' : '' },
      { label: 'Abnormal Pods', value: summary.pods.abnormal.length, className: summary.pods.abnormal.length > 0 ? 'warning' : '' },
      { label: 'Failed Pods', value: summary.pods.failed.length, className: summary.pods.failed.length > 0 ? 'critical' : '' },
      { label: 'Failed Jobs', value: summary.jobs.failed.length, className: summary.jobs.failed.length > 0 ? 'critical' : '' },
      { label: 'Warning Events', value: summary.events.warnings.length, className: summary.events.warnings.length > 0 ? 'warning' : '' }
    ];

    const cardMarkup = cards
      .map((card) => {
        const className = card.className ? ` ${card.className}` : '';
        return `
      <div class="stat-card${className}">
        <div class="label">${this.escapeHtml(card.label)}</div>
        <div class="value">${this.escapeHtml(card.value)}</div>
      </div>`;
      })
      .join('\n');

    return `
<section class="section" id="overview">
  <h2>Cluster Pulse</h2>
  <p class="muted">Snapshot of the selected timeframe and namespace.</p>
  <div class="stat-grid">${cardMarkup}</div>
</section>`;
  }

  private renderPodSection(summary: SummaryData): string {
    const content: string[] = [];

    content.push('<section class="section" id="pods">');
    content.push('<h2>Pod Health</h2>');
    content.push('<p class="muted">Understand pod distribution and spotlight anything that needs attention.</p>');

    if (summary.pods.statusBreakdown.length > 0) {
      const rows = summary.pods.statusBreakdown
        .map((phase) => {
          const percent = summary.pods.total > 0 ? ((phase.count / summary.pods.total) * 100).toFixed(1) : '0.0';
          const rowClass = phase.phase.toLowerCase() === 'failed' ? ' class="failed"' : '';
          return `<tr${rowClass}><td>${this.renderStatusTag(phase.phase)}</td><td>${this.escapeHtml(phase.count)}</td><td>${percent}%</td></tr>`;
        })
        .join('\n');

      content.push(`
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Phase</th>
              <th>Count</th>
              <th>Percent</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      </div>`);
    } else {
      content.push('<div class="empty-state">No pods found in the specified scope.</div>');
    }

    if (summary.pods.restarted.length > 0) {
      const rows = summary.pods.restarted.slice(0, 15).map((pod) => this.renderRestartRow(pod)).join('\n');
      const extra = summary.pods.restarted.length > 15 ? `<div class="muted">â€¦and ${this.escapeHtml(summary.pods.restarted.length - 15)} more pods with restarts</div>` : '';
      content.push(`
      <h3>Pods With Restarts</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Pod</th>
              <th>Namespace</th>
              <th>Container</th>
              <th>Restarts</th>
              <th>Reason</th>
              <th>Last Restart</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      </div>
      ${extra}`);
    }

    if (summary.pods.abnormal.length > 0) {
      const rows = summary.pods.abnormal.slice(0, 15).map((pod) => this.renderAbnormalRow(pod)).join('\n');
      const extra = summary.pods.abnormal.length > 15 ? `<div class="muted">â€¦and ${this.escapeHtml(summary.pods.abnormal.length - 15)} more abnormal pods</div>` : '';
      content.push(`
      <h3>Abnormal Pods</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Pod</th>
              <th>Namespace</th>
              <th>Status</th>
              <th>Reason</th>
              <th>Node</th>
              <th>Start Time</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      </div>
      ${extra}`);
    }

    if (summary.pods.failed.length > 0) {
      const rows = summary.pods.failed.slice(0, 20).map((pod) => this.renderFailedPodRow(pod)).join('\n');
      const extra = summary.pods.failed.length > 20 ? `<div class="muted">â€¦and ${this.escapeHtml(summary.pods.failed.length - 20)} more failed pods</div>` : '';
      content.push(`
      <h3>ðŸš¨ Failed Pods</h3>
      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Pod</th>
              <th>Namespace</th>
              <th>Failure Reason</th>
              <th>Node</th>
              <th>Started</th>
            </tr>
          </thead>
          <tbody>
            ${rows}
          </tbody>
        </table>
      </div>
      ${extra}`);
    }

    content.push('</section>');

    return content.join('\n');
  }

  private renderJobSection(summary: SummaryData): string {
    const rows = summary.jobs.failed.slice(0, 15).map((job) => this.renderFailedJobRow(job)).join('\n');
    const extra = summary.jobs.failed.length > 15 ? `<div class="muted">â€¦and ${this.escapeHtml(summary.jobs.failed.length - 15)} more failed jobs</div>` : '';

    return `
<section class="section" id="jobs">
  <h2>Job Health</h2>
  <p class="muted">Batch workloads that completed during the window.</p>
  <div class="stat-grid">
    <div class="stat-card"><div class="label">Successful Jobs</div><div class="value">${this.escapeHtml(summary.jobs.successful)}</div></div>
    <div class="stat-card${summary.jobs.failed.length > 0 ? ' critical' : ''}"><div class="label">Failed Jobs</div><div class="value">${this.escapeHtml(summary.jobs.failed.length)}</div></div>
    <div class="stat-card"><div class="label">Active Jobs</div><div class="value">${this.escapeHtml(summary.jobs.active)}</div></div>
  </div>
  ${summary.jobs.failed.length === 0 ? '<div class="empty-state">No job failures detected.</div>' : `
    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Job</th>
            <th>Namespace</th>
            <th>Duration</th>
            <th>Failure Reason</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
    ${extra}
  `}
</section>`;
  }

  private renderEventSection(summary: SummaryData): string {
    if (summary.events.total === 0) {
      return `
<section class="section" id="events">
  <h2>Event Signals</h2>
  <div class="empty-state">No events recorded in this timeframe.</div>
</section>`;
    }

    const rows = summary.events.warnings.slice(0, 20).map((event) => this.renderWarningRow(event)).join('\n');
    const extra = summary.events.warnings.length > 20 ? `<div class="muted">â€¦and ${this.escapeHtml(summary.events.warnings.length - 20)} additional warning events</div>` : '';

    return `
<section class="section" id="events">
  <h2>Event Signals</h2>
  <p class="muted">Look for noisy controllers or instability across the cluster.</p>
  <div class="stat-grid">
    <div class="stat-card${summary.events.warnings.length > 0 ? ' warning' : ''}"><div class="label">Warning Events</div><div class="value">${this.escapeHtml(summary.events.warnings.length)}</div></div>
    <div class="stat-card"><div class="label">Total Events</div><div class="value">${this.escapeHtml(summary.events.total)}</div></div>
  </div>
  ${summary.events.warnings.length === 0 ? '<div class="empty-state">No warning events to highlight.</div>' : `
    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Reason</th>
            <th>Count</th>
            <th>Involved Object</th>
            <th>Last Seen</th>
          </tr>
        </thead>
        <tbody>
          ${rows}
        </tbody>
      </table>
    </div>
    ${extra}
  `}
</section>`;
  }

  private renderInsightsSection(insights: string[]): string {
    if (!insights.length) {
      return '';
    }

    const listItems = insights.map((insight) => `<li>${this.escapeHtml(insight)}</li>`).join('\n');
    return `
<section class="section" id="insights">
  <h2>Key Insights</h2>
  <ul class="insight-list">
    ${listItems}
  </ul>
</section>`;
  }

  private renderRecommendedMetricsSection(): string {
    const cards = this.getRecommendedMetrics()
      .map(
        (metric) => `
      <div class="metric-card">
        <h3>${this.escapeHtml(metric.category)}</h3>
        <p>${this.escapeHtml(metric.description)}</p>
        <ul>
          ${metric.metrics.map((item) => `<li>${this.escapeHtml(item)}</li>`).join('\n')}
        </ul>
      </div>`
      )
      .join('\n');

    return `
<section class="section" id="recommended-metrics">
  <h2>Recommended Metrics to Watch</h2>
  <p class="muted">Beyond pod status, track these indicators to catch issues before they surface.</p>
  <div class="metric-grid">
    ${cards}
  </div>
</section>`;
  }

  private renderRestartRow(pod: PodRestart): string {
    const className = pod.reason && pod.reason.toLowerCase() === 'oomkilled' ? ' class="highlight"' : '';
    return `<tr${className}>
      <td>${this.escapeHtml(pod.name)}</td>
      <td>${this.escapeHtml(pod.namespace)}</td>
      <td>${this.escapeHtml(pod.containerName || '')}</td>
      <td>${this.escapeHtml(pod.restartCount)}</td>
      <td>${this.renderReasonTag(pod.reason)}</td>
      <td>${this.escapeHtml(pod.lastRestartTime ? pod.lastRestartTime.toLocaleString() : 'Unknown')}</td>
    </tr>`;
  }

  private renderAbnormalRow(pod: PodHealthRecord): string {
    return `<tr>
      <td>${this.escapeHtml(pod.name)}</td>
      <td>${this.escapeHtml(pod.namespace)}</td>
      <td>${this.renderStatusTag(pod.status)}</td>
      <td>${this.renderReasonTag(pod.reason)}</td>
      <td>${this.escapeHtml(pod.nodeName || 'Unknown')}</td>
      <td>${this.escapeHtml(pod.startTime ? pod.startTime.toLocaleString() : 'Unknown')}</td>
    </tr>`;
  }

  private renderFailedPodRow(pod: PodHealthRecord): string {
    return `<tr class="failed">
      <td>${this.escapeHtml(pod.name)}</td>
      <td>${this.escapeHtml(pod.namespace)}</td>
      <td>${this.renderReasonTag(pod.reason || 'Failed')}</td>
      <td>${this.escapeHtml(pod.nodeName || 'Unknown')}</td>
      <td>${this.escapeHtml(pod.startTime ? pod.startTime.toLocaleString() : 'Unknown')}</td>
    </tr>`;
  }

  private renderFailedJobRow(job: JobStatus): string {
    return `<tr>
      <td>${this.escapeHtml(job.name)}</td>
      <td>${this.escapeHtml(job.namespace)}</td>
      <td>${this.escapeHtml(job.duration || 'Unknown')}</td>
      <td>${this.renderReasonTag(job.failureReason)}</td>
    </tr>`;
  }

  private renderWarningRow(event: EventInfo): string {
    const objectName = `${event.involvedObject.kind}/${event.involvedObject.name}`;
    return `<tr>
      <td>${this.escapeHtml(event.reason)}</td>
      <td>${this.escapeHtml(event.count)}</td>
      <td>${this.escapeHtml(objectName)}</td>
      <td>${this.escapeHtml(event.lastTime.toLocaleString())}</td>
    </tr>`;
  }

  private renderStatusTag(status: string): string {
    const normalized = status.toLowerCase();
    const className = normalized === 'failed' ? 'failed' : normalized === 'pending' ? 'pending' : normalized === 'running' ? 'running' : '';
    return `<span class="tag ${className}">${this.escapeHtml(status)}</span>`;
  }

  private renderReasonTag(reason?: string): string {
    if (!reason) {
      return '<span class="tag muted">Unknown</span>';
    }

    const normalized = reason.toLowerCase();
    if (normalized.includes('oom')) {
      return `<span class="tag failed">${this.escapeHtml(reason)}</span>`;
    }
    if (normalized.includes('crashloop')) {
      return `<span class="tag warning">${this.escapeHtml(reason)}</span>`;
    }
    return `<span class="tag">${this.escapeHtml(reason)}</span>`;
  }

  private getRecommendedMetrics(): RecommendedMetric[] {
    return [
      {
        category: 'Workload Stability',
        description: 'Confirm pods can start, stay ready, and avoid unhealthy restarts.',
        metrics: [
          'Pod readiness percentage per namespace',
          'CrashLoopBackOff occurrences per workload',
          'Average pod startup latency (Pending â†’ Ready)',
          'Container restart rate versus SLO'
        ]
      },
      {
        category: 'Resource Saturation',
        description: 'Watch pressure on compute, memory, and storage layers.',
        metrics: [
          'Node CPU and memory utilization vs. allocatable',
          'Pod memory working set vs. limits (look for OOM risk)',
          'PersistentVolumeClaim usage and disk pressure signals',
          'Cluster-wide P95 CPU throttling percentage'
        ]
      },
      {
        category: 'Reliability & SLIs',
        description: 'Track control-plane responsiveness and error budgets.',
        metrics: [
          'API server request latency (p95/p99)',
          'Kubelet pod eviction and node NotReady counts',
          'Ingress/Service error rates vs. target SLO',
          'Job completion latency for critical batch workloads'
        ]
      },
      {
        category: 'Scaling & Capacity Signals',
        description: 'Ensure autoscalers and cluster capacity keep pace with load.',
        metrics: [
          'HPA target utilization vs. desired replicas',
          'Cluster autoscaler pending pods backlog',
          'Queue depth or request rate for key services',
          'Upcoming deployments with surge impact on capacity'
        ]
      }
    ];
  }

  private escapeHtml(value: unknown): string {
    if (value === null || value === undefined) {
      return '';
    }

    return String(value)
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;');
  }
}
